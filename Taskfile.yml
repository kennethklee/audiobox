version: '3'
silent: true

env:
  PORT: 8080
  VERSION:
    sh: git describe --tags --always --dirty

vars:
  ENV:
    sh: echo ${ENV:-dev}

tasks:
  default:
    cmds:
      - echo AudioBox Server $VERSION
      - task --list-all

  version:
    desc: Show version
    cmds:
      - echo $VERSION

  up:
    desc: Start the application
    cmds:
      - echo Starting AudioBox Server $VERSION from docker-compose.{{.ENV}}.yml
      - docker compose -f docker-compose.yml -f docker-compose.{{.ENV}}.yml up --remove-orphans -d {{.CLI_ARGS}}

  down:
    desc: Destroy the application and data
    cmds:
      - docker compose -f docker-compose.yml -f docker-compose.{{.ENV}}.yml down --volumes

  stop:
    desc: Stop the application
    cmds:
      - docker compose -f docker-compose.yml -f docker-compose.{{.ENV}}.yml stop {{.CLI_ARGS}}

  restart:
    desc: Restart the application
    cmds:
      - docker compose -f docker-compose.yml -f docker-compose.{{.ENV}}.yml restart {{.CLI_ARGS}}

  watch:
    desc: Watch for changes and rebuild
    cmds:
      - docker compose -f docker-compose.yml -f docker-compose.{{.ENV}}.yml watch {{.CLI_ARGS}}

  stage:
    desc: Run staging stack (as close to production)
    env:
      ENV: test
    cmds:
      - "echo Run: task up ENV=stage"

  logs:
    desc: Show logs
    cmds:
      - docker compose -f docker-compose.yml -f docker-compose.{{.ENV}}.yml logs --tail 100 -f {{.CLI_ARGS}}

  ps:
    desc: Show running containers
    cmds:
      - docker compose -f docker-compose.yml -f docker-compose.{{.ENV}}.yml ps -a

  port:
    desc: Show port mapping
    vars:
      host:
        sh: docker compose port app 8090
    cmds:
      - echo Server hosted on http://{{.host}}

  app:
    desc: Run a command in the app container
    cmds:
      - docker compose -f docker-compose.yml -f docker-compose.{{.ENV}}.yml exec app {{or .CLI_ARGS "sh"}}

  build:
    desc: Locally build the executable
    env:
      GOCACHE:
        sh: echo $PWD/app/.cache
      CGO_ENABLED: 0
    cmds:
      - (go build -v -ldflags "-s -w -X main.Version=$VERSION" -tags timetzdata -o audiobox)

  test:
    desc: Run tests
    cmds:
      - docker compose -f docker-compose.yml -f docker-compose.{{.ENV}}.yml exec app go test -v ./...

  # release:
  #   desc: Build and push docker image
  #   cmds:
  #     - docker build -t kennethkl/audiobox:${VERSION:-dev} -t kennethkl/audiobox:latest --push .
  #     - docker push kennethkl/audiobox:${VERSION:-dev}
  #     - docker tag kennethkl/audiobox:${VERSION:-dev} kennethkl/audiobox:latest
  #     - docker push kennethkl/audiobox:latest

  release:
    desc: Build and push docker image for multiple architectures
    # TODO go releaser?
    cmds:
      - docker buildx build --platform linux/arm64,linux/amd64 -t kennethkl/audiobox:${VERSION:-dev} -t kennethkl/audiobox:latest --push .
